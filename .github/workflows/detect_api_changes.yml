name: üëÄ Detect public API changes

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      new:
        description: 'Branch/tag of the new/updated version'
        required: true
      old:
        description: 'Branch/tag of the old/comparison version'
        required: true
      
jobs:

  build:
    runs-on: macos-14

    steps:
    - uses: n1hility/cancel-previous-runs@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Select latest Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1'
        
    - name: üöö Fetch repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üëæ Define Diff Versions
      run: |
        NEW="${{ env.source }}~${{ env.headGithubRepo }}"
        OLD="${{ env.target }}~${{ env.baseGithubRepo }}"
        
        if [[ '${{ env.targetBranchName || env.noTargetBranch }}' == release/* ]]
        then
            LATEST_TAG=$(git describe --tags --abbrev=0)
            OLD="$LATEST_TAG~${{ env.baseGithubRepo }}" 
        fi
        
        # Providing the output to the environment
        echo "OLD_VERSION=$OLD" >> $GITHUB_ENV
        echo "NEW_VERSION=$NEW" >> $GITHUB_ENV
      env:
        source: '${{ github.event.inputs.new || github.head_ref }}'
        target: '${{ github.event.inputs.old || github.event.pull_request.base.ref }}'
        headGithubRepo: '${{github.server_url}}/${{ github.event.pull_request.head.repo.full_name || github.repository}}.git'
        baseGithubRepo: '${{github.server_url}}/${{github.repository}}.git'
        noTargetBranch: 'no target branch'
        targetBranchName: '${{ github.head_ref }}'

    # The github action automatically posts on a PR (if it's not a fork-PR)
    # and/or outputs the diff to the $GITHUB_STEP_SUMMARY
    - name: üîç Detect Changes
      uses: Adyen/adyen-swift-public-api-diff@0.8.3
      with:
        platform: "iOS"
        new: ${{ env.NEW_VERSION }}
        old: ${{ env.OLD_VERSION }}
